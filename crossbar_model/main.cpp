#include "cam.h"

#include <iostream>
#include <chrono>
#include <cassert>

int main(int argc, char* argv[]) {
    srand((unsigned int) time(0));

    int M = (argc >= 2) ? std::atoi(argv[1]) : 16;
    int N = (argc >= 3) ? std::atoi(argv[2]) : 16;

    int runs = (argc >= 4) ? std::atoi(argv[3]) : 1;

    bool print = false;
    if (std::atoi(argv[4]) == 1) { print = true; }

    long long total_time = 0;
    Eigen::VectorXf V = Eigen::VectorXf::Zero(2*M*N);

    Eigen::VectorXf Vref = Eigen::VectorXf::Zero(2*M*N);
    if (M == 16 && N == 16 && print) {
        Vref(0)   = 3.45643e-07;
        Vref(1)   = 6.69537e-07;
        Vref(2)   =  9.7171e-07;
        Vref(3)   = 1.25219e-06;
        Vref(4)   =   1.511e-06;
        Vref(5)   = 1.74816e-06;
        Vref(6)   =  1.9637e-06;
        Vref(7)   = 2.15764e-06;
        Vref(8)   = 2.32999e-06;
        Vref(9)   = 2.48076e-06;
        Vref(10)  = 2.60997e-06;
        Vref(11)  = 2.71764e-06;
        Vref(12)  = 2.80377e-06;
        Vref(13)  = 2.86837e-06;
        Vref(14)  = 2.91144e-06;
        Vref(15)  = 2.93299e-06;
        Vref(16)  =     1.49891;
        Vref(17)  =     1.49789;
        Vref(18)  =     1.49694;
        Vref(19)  =     1.49605;
        Vref(20)  =     1.49524;
        Vref(21)  =     1.49449;
        Vref(22)  =     1.49381;
        Vref(23)  =      1.4932;
        Vref(24)  =     1.49265;
        Vref(25)  =     1.49218;
        Vref(26)  =     1.49177;
        Vref(27)  =     1.49143;
        Vref(28)  =     1.49116;
        Vref(29)  =     1.49095;
        Vref(30)  =     1.49082;
        Vref(31)  =     1.49075;
        Vref(32)  =  3.3262e-07;
        Vref(33)  = 6.44315e-07;
        Vref(34)  = 9.35112e-07;
        Vref(35)  = 1.20504e-06;
        Vref(36)  = 1.45411e-06;
        Vref(37)  = 1.68236e-06;
        Vref(38)  = 1.88981e-06;
        Vref(39)  = 2.07646e-06;
        Vref(40)  = 2.24235e-06;
        Vref(41)  = 2.38748e-06;
        Vref(42)  = 2.51186e-06;
        Vref(43)  =  2.6155e-06;
        Vref(44)  = 2.69841e-06;
        Vref(45)  = 2.76059e-06;
        Vref(46)  = 2.80205e-06;
        Vref(47)  =  2.8228e-06;
        Vref(48)  = 3.19251e-07;
        Vref(49)  = 6.18412e-07;
        Vref(50)  =  8.9751e-07;
        Vref(51)  = 1.15657e-06;
        Vref(52)  = 1.39561e-06;
        Vref(53)  = 1.61466e-06;
        Vref(54)  = 1.81374e-06;
        Vref(55)  = 1.99286e-06;
        Vref(56)  = 2.15204e-06;
        Vref(57)  =  2.2913e-06;
        Vref(58)  = 2.41064e-06;
        Vref(59)  = 2.51008e-06;
        Vref(60)  = 2.58963e-06;
        Vref(61)  = 2.64929e-06;
        Vref(62)  = 2.68908e-06;
        Vref(63)  = 2.70899e-06;
        Vref(64)  = 3.05806e-07;
        Vref(65)  = 5.92367e-07;
        Vref(66)  = 8.59711e-07;
        Vref(67)  = 1.10786e-06;
        Vref(68)  = 1.33684e-06;
        Vref(69)  = 1.54666e-06;
        Vref(70)  = 1.73735e-06;
        Vref(71)  = 1.90892e-06;
        Vref(72)  = 2.06139e-06;
        Vref(73)  = 2.19478e-06;
        Vref(74)  =  2.3091e-06;
        Vref(75)  = 2.40435e-06;
        Vref(76)  = 2.48055e-06;
        Vref(77)  =  2.5377e-06;
        Vref(78)  =  2.5758e-06;
        Vref(79)  = 2.59487e-06;
        Vref(80)  = 2.92383e-07;
        Vref(81)  = 5.66367e-07;
        Vref(82)  = 8.21975e-07;
        Vref(83)  = 1.05923e-06;
        Vref(84)  = 1.27815e-06;
        Vref(85)  = 1.47876e-06;
        Vref(86)  = 1.66108e-06;
        Vref(87)  = 1.82512e-06;
        Vref(88)  =  1.9709e-06;
        Vref(89)  = 2.09843e-06;
        Vref(90)  = 2.20773e-06;
        Vref(91)  =  2.2988e-06;
        Vref(92)  = 2.37165e-06;
        Vref(93)  = 2.42629e-06;
        Vref(94)  = 2.46272e-06;
        Vref(95)  = 2.48096e-06;
        Vref(96)  = 2.78982e-07;
        Vref(97)  = 5.40407e-07;
        Vref(98)  = 7.84298e-07;
        Vref(99)  = 1.01068e-06;
        Vref(100) = 1.21957e-06;
        Vref(101) = 1.41098e-06;
        Vref(102) = 1.58494e-06;
        Vref(103) = 1.74146e-06;
        Vref(104) = 1.88056e-06;
        Vref(105) = 2.00224e-06;
        Vref(106) = 2.10653e-06;
        Vref(107) = 2.19342e-06;
        Vref(108) = 2.26293e-06;
        Vref(109) = 2.31507e-06;
        Vref(110) = 2.34983e-06;
        Vref(111) = 2.36723e-06;
        Vref(112) = 2.65601e-07;
        Vref(113) = 5.14488e-07;
        Vref(114) = 7.46682e-07;
        Vref(115) = 9.62203e-07;
        Vref(116) = 1.16107e-06;
        Vref(117) = 1.34331e-06;
        Vref(118) = 1.50892e-06;
        Vref(119) = 1.65794e-06;
        Vref(120) = 1.79036e-06;
        Vref(121) = 1.90621e-06;
        Vref(122) = 2.00549e-06;
        Vref(123) = 2.08821e-06;
        Vref(124) = 2.15439e-06;
        Vref(125) = 2.20402e-06;
        Vref(126) = 2.23712e-06;
        Vref(127) = 2.25368e-06;
        Vref(128) =     1.49891;
        Vref(129) =     1.49789;
        Vref(130) =     1.49694;
        Vref(131) =     1.49605;
        Vref(132) =     1.49524;
        Vref(133) =     1.49449;
        Vref(134) =     1.49381;
        Vref(135) =      1.4932;
        Vref(136) =     1.49265;
        Vref(137) =     1.49218;
        Vref(138) =     1.49177;
        Vref(139) =     1.49143;
        Vref(140) =     1.49116;
        Vref(141) =     1.49095;
        Vref(142) =     1.49082;
        Vref(143) =     1.49075;
        Vref(144) = 2.25837e-07;
        Vref(145) = 4.37462e-07;
        Vref(146) = 6.34893e-07;
        Vref(147) = 8.18148e-07;
        Vref(148) = 9.87241e-07;
        Vref(149) = 1.14219e-06;
        Vref(150) = 1.28301e-06;
        Vref(151) = 1.40971e-06;
        Vref(152) = 1.52231e-06;
        Vref(153) = 1.62081e-06;
        Vref(154) = 1.70522e-06;
        Vref(155) = 1.77556e-06;
        Vref(156) = 1.83182e-06;
        Vref(157) = 1.87402e-06;
        Vref(158) = 1.90216e-06;
        Vref(159) = 1.91625e-06;
        Vref(160) = 1.99083e-07;
        Vref(161) = 3.85638e-07;
        Vref(162) = 5.59679e-07;
        Vref(163) = 7.21224e-07;
        Vref(164) = 8.70285e-07;
        Vref(165) = 1.00688e-06;
        Vref(166) = 1.13101e-06;
        Vref(167) =  1.2427e-06;
        Vref(168) = 1.34195e-06;
        Vref(169) = 1.42878e-06;
        Vref(170) = 1.50319e-06;
        Vref(171) = 1.56519e-06;
        Vref(172) = 1.61479e-06;
        Vref(173) = 1.65199e-06;
        Vref(174) =  1.6768e-06;
        Vref(175) = 1.68921e-06;
        Vref(176) =  1.7238e-07;
        Vref(177) = 3.33911e-07;
        Vref(178) = 4.84608e-07;
        Vref(179) = 6.24484e-07;
        Vref(180) =  7.5355e-07;
        Vref(181) = 8.71818e-07;
        Vref(182) = 9.79299e-07;
        Vref(183) =   1.076e-06;
        Vref(184) = 1.16194e-06;
        Vref(185) = 1.23712e-06;
        Vref(186) = 1.30155e-06;
        Vref(187) = 1.35524e-06;
        Vref(188) = 1.39818e-06;
        Vref(189) = 1.43039e-06;
        Vref(190) = 1.45187e-06;
        Vref(191) = 1.46262e-06;
        Vref(192) = 1.45728e-07;
        Vref(193) = 2.82285e-07;
        Vref(194) = 4.09682e-07;
        Vref(195) = 5.27931e-07;
        Vref(196) = 6.37041e-07;
        Vref(197) = 7.37022e-07;
        Vref(198) = 8.27884e-07;
        Vref(199) = 9.09636e-07;
        Vref(200) = 9.82286e-07;
        Vref(201) = 1.04584e-06;
        Vref(202) = 1.10031e-06;
        Vref(203) = 1.14569e-06;
        Vref(204) = 1.18199e-06;
        Vref(205) = 1.20922e-06;
        Vref(206) = 1.22738e-06;
        Vref(207) = 1.23647e-06;
        Vref(208) = 1.19126e-07;
        Vref(209) = 2.30755e-07;
        Vref(210) = 3.34895e-07;
        Vref(211) = 4.31556e-07;
        Vref(212) = 5.20747e-07;
        Vref(213) = 6.02476e-07;
        Vref(214) =  6.7675e-07;
        Vref(215) = 7.43578e-07;
        Vref(216) = 8.02965e-07;
        Vref(217) = 8.54916e-07;
        Vref(218) = 8.99438e-07;
        Vref(219) = 9.36536e-07;
        Vref(220) = 9.66211e-07;
        Vref(221) =  9.8847e-07;
        Vref(222) = 1.00331e-06;
        Vref(223) = 1.01074e-06;
        Vref(224) = 9.28674e-08;
        Vref(225) = 1.79889e-07;
        Vref(226) = 2.61073e-07;
        Vref(227) = 3.36426e-07;
        Vref(228) = 4.05956e-07;
        Vref(229) = 4.69668e-07;
        Vref(230) =  5.2757e-07;
        Vref(231) = 5.79667e-07;
        Vref(232) = 6.25962e-07;
        Vref(233) = 6.66461e-07;
        Vref(234) = 7.01168e-07;
        Vref(235) = 7.30087e-07;
        Vref(236) = 7.53221e-07;
        Vref(237) = 7.70572e-07;
        Vref(238) = 7.82143e-07;
        Vref(239) = 7.87933e-07;
        Vref(240) = 6.62765e-08;
        Vref(241) = 1.28381e-07;
        Vref(242) = 1.86319e-07;
        Vref(243) = 2.40096e-07;
        Vref(244) = 2.89716e-07;
        Vref(245) = 3.35186e-07;
        Vref(246) = 3.76509e-07;
        Vref(247) = 4.13688e-07;
        Vref(248) = 4.46727e-07;
        Vref(249) =  4.7563e-07;
        Vref(250) = 5.00398e-07;
        Vref(251) = 5.21036e-07;
        Vref(252) = 5.37546e-07;
        Vref(253) =  5.4993e-07;
        Vref(254) = 5.58187e-07;
        Vref(255) =  5.6232e-07;
        Vref(256) =  0.00118115;
        Vref(257) =  0.00118033;
        Vref(258) =  0.00117956;
        Vref(259) =  0.00117885;
        Vref(260) =   0.0011782;
        Vref(261) =   0.0011776;
        Vref(262) =  0.00117704;
        Vref(263) =  0.00117655;
        Vref(264) =  0.00117611;
        Vref(265) =  0.00117573;
        Vref(266) =   0.0011754;
        Vref(267) =  0.00117513;
        Vref(268) =  0.00117491;
        Vref(269) =  0.00117474;
        Vref(270) =  0.00117463;
        Vref(271) =  0.00117458;
        Vref(272) =  0.00118117;
        Vref(273) =  0.00118034;
        Vref(274) =  0.00117958;
        Vref(275) =  0.00117887;
        Vref(276) =  0.00117821;
        Vref(277) =  0.00117762;
        Vref(278) =  0.00117706;
        Vref(279) =  0.00117657;
        Vref(280) =  0.00117613;
        Vref(281) =  0.00117575;
        Vref(282) =  0.00117542;
        Vref(283) =  0.00117514;
        Vref(284) =  0.00117493;
        Vref(285) =  0.00117476;
        Vref(286) =  0.00117465;
        Vref(287) =   0.0011746;
        Vref(288) =  0.00113569;
        Vref(289) =   0.0011349;
        Vref(290) =  0.00113416;
        Vref(291) =  0.00113348;
        Vref(292) =  0.00113285;
        Vref(293) =  0.00113227;
        Vref(294) =  0.00113174;
        Vref(295) =  0.00113127;
        Vref(296) =  0.00113085;
        Vref(297) =  0.00113048;
        Vref(298) =  0.00113016;
        Vref(299) =   0.0011299;
        Vref(300) =  0.00112969;
        Vref(301) =  0.00112953;
        Vref(302) =  0.00112942;
        Vref(303) =  0.00112937;
        Vref(304) =  0.00109023;
        Vref(305) =  0.00108947;
        Vref(306) =  0.00108876;
        Vref(307) =  0.00108811;
        Vref(308) =   0.0010875;
        Vref(309) =  0.00108695;
        Vref(310) =  0.00108644;
        Vref(311) =  0.00108598;
        Vref(312) =  0.00108558;
        Vref(313) =  0.00108523;
        Vref(314) =  0.00108492;
        Vref(315) =  0.00108467;
        Vref(316) =  0.00108447;
        Vref(317) =  0.00108432;
        Vref(318) =  0.00108421;
        Vref(319) =  0.00108416;
        Vref(320) =  0.00104479;
        Vref(321) =  0.00104406;
        Vref(322) =  0.00104338;
        Vref(323) =  0.00104275;
        Vref(324) =  0.00104217;
        Vref(325) =  0.00104165;
        Vref(326) =  0.00104116;
        Vref(327) =  0.00104072;
        Vref(328) =  0.00104033;
        Vref(329) =  0.00103999;
        Vref(330) =   0.0010397;
        Vref(331) =  0.00103946;
        Vref(332) =  0.00103927;
        Vref(333) =  0.00103912;
        Vref(334) =  0.00103902;
        Vref(335) =  0.00103898;
        Vref(336) = 0.000999364;
        Vref(337) = 0.000998667;
        Vref(338) = 0.000998019;
        Vref(339) =  0.00099742;
        Vref(340) = 0.000996865;
        Vref(341) =  0.00099636;
        Vref(342) = 0.000995891;
        Vref(343) = 0.000995473;
        Vref(344) = 0.000995104;
        Vref(345) = 0.000994778;
        Vref(346) = 0.000994501;
        Vref(347) = 0.000994269;
        Vref(348) = 0.000994083;
        Vref(349) = 0.000993945;
        Vref(350) = 0.000993852;
        Vref(351) = 0.000993807;
        Vref(352) = 0.000953957;
        Vref(353) = 0.000953291;
        Vref(354) = 0.000952673;
        Vref(355) = 0.000952101;
        Vref(356) = 0.000951572;
        Vref(357) = 0.000951089;
        Vref(358) = 0.000950641;
        Vref(359) = 0.000950243;
        Vref(360) =  0.00094989;
        Vref(361) = 0.000949579;
        Vref(362) = 0.000949315;
        Vref(363) = 0.000949093;
        Vref(364) = 0.000948916;
        Vref(365) = 0.000948785;
        Vref(366) = 0.000948696;
        Vref(367) = 0.000948652;
        Vref(368) = 0.000908563;
        Vref(369) =  0.00090793;
        Vref(370) = 0.000907341;
        Vref(371) = 0.000906796;
        Vref(372) = 0.000906292;
        Vref(373) = 0.000905833;
        Vref(374) = 0.000905406;
        Vref(375) = 0.000905026;
        Vref(376) =  0.00090469;
        Vref(377) = 0.000904394;
        Vref(378) = 0.000904143;
        Vref(379) = 0.000903932;
        Vref(380) = 0.000903763;
        Vref(381) = 0.000903637;
        Vref(382) = 0.000903553;
        Vref(383) = 0.000903511;
        Vref(384) = 0.000863183;
        Vref(385) = 0.000862582;
        Vref(386) = 0.000862022;
        Vref(387) = 0.000861504;
        Vref(388) = 0.000861025;
        Vref(389) = 0.000860589;
        Vref(390) = 0.000860183;
        Vref(391) = 0.000859822;
        Vref(392) = 0.000859503;
        Vref(393) = 0.000859222;
        Vref(394) = 0.000858983;
        Vref(395) = 0.000858783;
        Vref(396) = 0.000858622;
        Vref(397) = 0.000858503;
        Vref(398) = 0.000858423;
        Vref(399) = 0.000858383;
        Vref(400) = 0.000772292;
        Vref(401) = 0.000771754;
        Vref(402) = 0.000771253;
        Vref(403) =  0.00077079;
        Vref(404) = 0.000770361;
        Vref(405) = 0.000769971;
        Vref(406) = 0.000769608;
        Vref(407) = 0.000769286;
        Vref(408) =    0.000769;
        Vref(409) = 0.000768748;
        Vref(410) = 0.000768534;
        Vref(411) = 0.000768355;
        Vref(412) = 0.000768212;
        Vref(413) = 0.000768105;
        Vref(414) = 0.000768033;
        Vref(415) = 0.000767998;
        Vref(416) = 0.000681411;
        Vref(417) = 0.000680936;
        Vref(418) = 0.000680495;
        Vref(419) = 0.000680086;
        Vref(420) = 0.000679708;
        Vref(421) = 0.000679363;
        Vref(422) = 0.000679043;
        Vref(423) = 0.000678759;
        Vref(424) = 0.000678507;
        Vref(425) = 0.000678285;
        Vref(426) = 0.000678096;
        Vref(427) = 0.000677938;
        Vref(428) = 0.000677811;
        Vref(429) = 0.000677717;
        Vref(430) = 0.000677654;
        Vref(431) = 0.000677623;
        Vref(432) =  0.00059054;
        Vref(433) = 0.000590128;
        Vref(434) = 0.000589745;
        Vref(435) = 0.000589391;
        Vref(436) = 0.000589064;
        Vref(437) = 0.000588765;
        Vref(438) = 0.000588488;
        Vref(439) = 0.000588241;
        Vref(440) = 0.000588023;
        Vref(441) = 0.000587831;
        Vref(442) = 0.000587667;
        Vref(443) =  0.00058753;
        Vref(444) =  0.00058742;
        Vref(445) = 0.000587339;
        Vref(446) = 0.000587284;
        Vref(447) = 0.000587257;
        Vref(448) = 0.000499677;
        Vref(449) = 0.000499328;
        Vref(450) = 0.000499004;
        Vref(451) = 0.000498704;
        Vref(452) = 0.000498427;
        Vref(453) = 0.000498175;
        Vref(454) =  0.00049794;
        Vref(455) = 0.000497731;
        Vref(456) = 0.000497547;
        Vref(457) = 0.000497384;
        Vref(458) = 0.000497245;
        Vref(459) =  0.00049713;
        Vref(460) = 0.000497037;
        Vref(461) = 0.000496968;
        Vref(462) = 0.000496921;
        Vref(463) = 0.000496899;
        Vref(464) = 0.000408819;
        Vref(465) = 0.000408534;
        Vref(466) = 0.000408269;
        Vref(467) = 0.000408024;
        Vref(468) = 0.000407797;
        Vref(469) = 0.000407591;
        Vref(470) = 0.000407399;
        Vref(471) = 0.000407228;
        Vref(472) = 0.000407077;
        Vref(473) = 0.000406944;
        Vref(474) = 0.000406831;
        Vref(475) = 0.000406736;
        Vref(476) =  0.00040666;
        Vref(477) = 0.000406603;
        Vref(478) = 0.000406565;
        Vref(479) = 0.000406547;
        Vref(480) = 0.000317967;
        Vref(481) = 0.000317745;
        Vref(482) = 0.000317539;
        Vref(483) = 0.000317348;
        Vref(484) = 0.000317172;
        Vref(485) = 0.000317011;
        Vref(486) = 0.000316862;
        Vref(487) = 0.000316729;
        Vref(488) = 0.000316612;
        Vref(489) = 0.000316508;
        Vref(490) =  0.00031642;
        Vref(491) = 0.000316346;
        Vref(492) = 0.000316287;
        Vref(493) = 0.000316243;
        Vref(494) = 0.000316214;
        Vref(495) = 0.000316199;
        Vref(496) = 0.000227117;
        Vref(497) = 0.000226959;
        Vref(498) = 0.000226812;
        Vref(499) = 0.000226676;
        Vref(500) =  0.00022655;
        Vref(501) = 0.000226435;
        Vref(502) = 0.000226328;
        Vref(503) = 0.000226233;
        Vref(504) = 0.000226149;
        Vref(505) = 0.000226075;
        Vref(506) = 0.000226013;
        Vref(507) =  0.00022596;
        Vref(508) = 0.000225918;
        Vref(509) = 0.000225886;
        Vref(510) = 0.000225865;
        Vref(511) = 0.000225855;
    }
    if (M == 16 && N == 16 && print) { V = Vref; }

    float Rswl1 = 3.;
    float Rswl2 = INFINITY;
    float Rsbl1 = INFINITY;
    float Rsbl2 = 5.;

    float Rwl = 3.;
    float Rbl = 2.;

    Eigen::SparseMatrix<float> G_ABCD = partially_precompute_G_ABCD(M, N, Rswl1, Rswl2, Rsbl1, Rsbl2, Rwl, Rbl);

    for (int i = 0; i < runs; i++) {
        float Rmin = 100.;
        float Rmax = 100000.;
        float Vdd = 1.5;

        if (print) {
            std::cout << "Rswl1: " << Rswl1 << std::endl;
            // std::cout << "Rswl2: " << Rswl2 << std::endl;
            // std::cout << "Rsbl1: " << Rsbl1 << std::endl;
            std::cout << "Rsbl2: " << Rsbl2 << std::endl;

            std::cout << "Rwl: " << Rwl << std::endl;
            std::cout << "Rbl: " << Rbl << std::endl << std::endl;
        }

        Eigen::MatrixXf R = Eigen::MatrixXf::Random(M, N);
        R = (R + Eigen::MatrixXf::Constant(M, N, 1.0)) * 0.5 * (Rmax - Rmin) + Eigen::MatrixXf::Constant(M, N, Rmin);
        // R = Eigen::MatrixXf::Zero(M, N);
        // R(0, 0) = 10.;
        // R(0, 1) = 15.;
        // R(0, 2) = 20.;
        // R(1, 0) = 25.;
        // R(1, 1) = 30.;
        // R(1, 2) = 35.;
        // R(2, 0) = 40.;
        // R(2, 1) = 45.;
        // R(2, 2) = 50.;

        // R(0, 0) = 1e4;
        // R(0, 1) = 2e4;
        // R(0, 2) = 3e4;
        // R(1, 0) = 4e4;
        // R(1, 1) = 5e4;
        // R(1, 2) = 6e4;
        // R(2, 0) = 7e4;
        // R(2, 1) = 8e4;
        // R(2, 2) = 9e4;

        if (print) {
            std::cout << "R:\n" << R << std::endl << std::endl;
        }

        Eigen::MatrixXf G = R.cwiseInverse();

        if (M == 16 && N == 16 && print) {
            G(0, 0)  = 6.14228e-06; G(0, 1)  = 6.14221e-06; G(0, 2)  = 6.14215e-06; G(0, 3)  = 6.14209e-06; G(0, 4)  = 6.14204e-06; G(0, 5)  = 6.14199e-06; G(0, 6)  = 6.14195e-06; G(0, 7)  = 6.14191e-06; G(0, 8)  = 6.14187e-06; G(0, 9)  = 6.14184e-06; G(0, 10)  = 6.14182e-06; G(0, 11)  = 6.14179e-06; G(0, 12)  = 6.14178e-06; G(0, 13)  = 6.14176e-06; G(0, 14)  = 6.14176e-06; G(0, 15)  = 6.14175e-06;
            G(1, 0)  = 1.47206e-05; G(1, 1)  =   1.472e-05; G(1, 2)  = 1.47194e-05; G(1, 3)  = 1.47189e-05; G(1, 4)  = 1.47184e-05; G(1, 5)  = 1.47179e-05; G(1, 6)  = 1.47175e-05; G(1, 7)  = 1.47171e-05; G(1, 8)  = 1.47168e-05; G(1, 9)  = 1.47165e-05; G(1, 10)  = 1.47163e-05; G(1, 11)  =  1.4716e-05; G(1, 12)  = 1.47159e-05; G(1, 13)  = 1.47158e-05; G(1, 14)  = 1.47157e-05; G(1, 15)  = 1.47156e-05;
            G(2, 0)  = 6.13966e-06; G(2, 1)  =  6.1396e-06; G(2, 2)  = 6.13954e-06; G(2, 3)  = 6.13948e-06; G(2, 4)  = 6.13943e-06; G(2, 5)  = 6.13939e-06; G(2, 6)  = 6.13934e-06; G(2, 7)  = 6.13931e-06; G(2, 8)  = 6.13927e-06; G(2, 9)  = 6.14912e-06; G(2, 10)  =  6.1491e-06; G(2, 11)  = 6.14908e-06; G(2, 12)  = 6.14906e-06; G(2, 13)  = 6.14905e-06; G(2, 14)  = 6.14904e-06; G(2, 15)  = 6.14903e-06;
            G(3, 0)  = 6.14692e-06; G(3, 1)  = 6.14686e-06; G(3, 2)  =  6.1468e-06; G(3, 3)  = 6.14675e-06; G(3, 4)  =  6.1467e-06; G(3, 5)  = 6.14665e-06; G(3, 6)  = 6.14661e-06; G(3, 7)  = 6.14658e-06; G(3, 8)  = 6.14654e-06; G(3, 9)  = 6.14652e-06; G(3, 10)  = 6.14649e-06; G(3, 11)  = 6.14647e-06; G(3, 12)  = 6.14645e-06; G(3, 13)  = 6.14644e-06; G(3, 14)  = 6.14643e-06; G(3, 15)  = 6.14643e-06;
            G(4, 0)  =  6.1443e-06; G(4, 1)  = 6.14424e-06; G(4, 2)  = 6.14418e-06; G(4, 3)  = 6.14413e-06; G(4, 4)  = 6.14409e-06; G(4, 5)  = 6.14404e-06; G(4, 6)  =   6.144e-06; G(4, 7)  = 6.14397e-06; G(4, 8)  = 6.14394e-06; G(4, 9)  = 6.14391e-06; G(4, 10)  = 6.14389e-06; G(4, 11)  = 6.14387e-06; G(4, 12)  = 6.14385e-06; G(4, 13)  = 6.14384e-06; G(4, 14)  = 6.14383e-06; G(4, 15)  = 6.14383e-06;
            G(5, 0)  = 6.14167e-06; G(5, 1)  = 6.14162e-06; G(5, 2)  = 6.14157e-06; G(5, 3)  = 6.14152e-06; G(5, 4)  = 6.14147e-06; G(5, 5)  = 6.14143e-06; G(5, 6)  =  6.1414e-06; G(5, 7)  = 6.14136e-06; G(5, 8)  = 6.14133e-06; G(5, 9)  = 6.14131e-06; G(5, 10)  = 6.14128e-06; G(5, 11)  = 6.14127e-06; G(5, 12)  = 6.14125e-06; G(5, 13)  = 6.14124e-06; G(5, 14)  = 6.14123e-06; G(5, 15)  = 6.14123e-06;
            G(6, 0)  = 6.13906e-06; G(6, 1)  =   6.139e-06; G(6, 2)  = 6.13895e-06; G(6, 3)  = 6.13891e-06; G(6, 4)  = 6.13886e-06; G(6, 5)  = 6.13883e-06; G(6, 6)  = 6.13879e-06; G(6, 7)  = 6.13876e-06; G(6, 8)  = 6.13873e-06; G(6, 9)  =  6.1387e-06; G(6, 10)  = 6.13868e-06; G(6, 11)  = 6.13866e-06; G(6, 12)  = 6.13865e-06; G(6, 13)  = 6.13864e-06; G(6, 14)  = 6.13863e-06; G(6, 15)  = 6.13863e-06;
            G(7, 0)  = 6.13644e-06; G(7, 1)  = 6.13639e-06; G(7, 2)  = 6.13634e-06; G(7, 3)  =  6.1363e-06; G(7, 4)  = 6.13625e-06; G(7, 5)  = 6.13622e-06; G(7, 6)  = 6.13618e-06; G(7, 7)  = 6.13615e-06; G(7, 8)  = 6.13613e-06; G(7, 9)  =  6.1361e-06; G(7, 10)  = 6.13608e-06; G(7, 11)  = 6.13607e-06; G(7, 12)  = 6.13605e-06; G(7, 13)  = 6.13604e-06; G(7, 14)  = 6.13603e-06; G(7, 15)  = 6.13603e-06;
            G(8, 0)  = 1.47208e-05; G(8, 1)  = 1.47202e-05; G(8, 2)  = 1.47196e-05; G(8, 3)  = 1.47191e-05; G(8, 4)  = 1.47186e-05; G(8, 5)  = 1.47181e-05; G(8, 6)  = 1.47177e-05; G(8, 7)  = 1.47173e-05; G(8, 8)  =  1.4717e-05; G(8, 9)  = 1.47167e-05; G(8, 10)  = 1.47164e-05; G(8, 11)  = 1.47162e-05; G(8, 12)  = 1.47161e-05; G(8, 13)  = 1.47159e-05; G(8, 14)  = 1.47159e-05; G(8, 15)  = 1.47158e-05;
            G(9, 0)  =  6.1384e-06; G(9, 1)  = 6.13835e-06; G(9, 2)  = 6.13831e-06; G(9, 3)  = 6.13827e-06; G(9, 4)  = 6.13824e-06; G(9, 5)  = 6.13821e-06; G(9, 6)  = 6.13818e-06; G(9, 7)  = 6.13815e-06; G(9, 8)  = 6.13813e-06; G(9, 9)  = 6.13811e-06; G(9, 10)  = 6.13809e-06; G(9, 11)  = 6.13808e-06; G(9, 12)  = 6.13807e-06; G(9, 13)  = 6.13806e-06; G(9, 14)  = 6.13805e-06; G(9, 15)  = 6.13805e-06;
            G(10, 0) = 6.13314e-06; G(10, 1) =  6.1331e-06; G(10, 2) = 6.13307e-06; G(10, 3) = 6.13304e-06; G(10, 4) =   6.133e-06; G(10, 5) = 6.13298e-06; G(10, 6) = 6.13295e-06; G(10, 7) = 6.13293e-06; G(10, 8) = 6.13291e-06; G(10, 9) = 6.13289e-06; G(10, 10) = 6.13288e-06; G(10, 11) = 6.13286e-06; G(10, 12) = 6.13285e-06; G(10, 13) = 6.13284e-06; G(10, 14) = 6.13284e-06; G(10, 15) = 6.13284e-06;
            G(11, 0) = 6.12789e-06; G(11, 1) = 6.12786e-06; G(11, 2) = 6.12783e-06; G(11, 3) =  6.1278e-06; G(11, 4) = 6.12777e-06; G(11, 5) = 6.12775e-06; G(11, 6) = 6.12773e-06; G(11, 7) = 6.12771e-06; G(11, 8) = 6.12769e-06; G(11, 9) = 6.12767e-06; G(11, 10) = 6.12766e-06; G(11, 11) = 6.12765e-06; G(11, 12) = 6.12764e-06; G(11, 13) = 6.12763e-06; G(11, 14) = 6.12763e-06; G(11, 15) = 6.12763e-06;
            G(12, 0) = 6.12264e-06; G(12, 1) = 6.12262e-06; G(12, 2) = 6.12259e-06; G(12, 3) = 6.12257e-06; G(12, 4) = 6.12254e-06; G(12, 5) = 6.12252e-06; G(12, 6) =  6.1225e-06; G(12, 7) = 6.12249e-06; G(12, 8) = 6.12247e-06; G(12, 9) = 6.12246e-06; G(12, 10) = 6.12245e-06; G(12, 11) = 6.12244e-06; G(12, 12) = 6.12243e-06; G(12, 13) = 6.12243e-06; G(12, 14) = 6.12242e-06; G(12, 15) = 6.12242e-06;
            G(13, 0) =  6.1174e-06; G(13, 1) = 6.11737e-06; G(13, 2) = 6.11735e-06; G(13, 3) = 6.11733e-06; G(13, 4) = 6.11732e-06; G(13, 5) =  6.1173e-06; G(13, 6) = 6.11728e-06; G(13, 7) = 6.11727e-06; G(13, 8) = 6.11726e-06; G(13, 9) = 6.11725e-06; G(13, 10) = 6.11724e-06; G(13, 11) = 6.11723e-06; G(13, 12) = 6.11722e-06; G(13, 13) = 6.11722e-06; G(13, 14) = 6.11722e-06; G(13, 15) = 6.11721e-06;
            G(14, 0) = 6.13162e-06; G(14, 1) =  6.1316e-06; G(14, 2) = 6.13158e-06; G(14, 3) = 6.13157e-06; G(14, 4) = 6.13155e-06; G(14, 5) = 6.13154e-06; G(14, 6) = 6.13153e-06; G(14, 7) = 6.13152e-06; G(14, 8) = 6.13151e-06; G(14, 9) =  6.1315e-06; G(14, 10) = 6.13149e-06; G(14, 11) = 6.13149e-06; G(14, 12) = 6.13148e-06; G(14, 13) = 6.13148e-06; G(14, 14) = 6.13147e-06; G(14, 15) = 6.13147e-06;
            G(15, 0) = 6.12634e-06; G(15, 1) = 6.12633e-06; G(15, 2) = 6.12632e-06; G(15, 3) = 6.12631e-06; G(15, 4) =  6.1263e-06; G(15, 5) = 6.12629e-06; G(15, 6) = 6.12628e-06; G(15, 7) = 6.12627e-06; G(15, 8) = 6.12626e-06; G(15, 9) = 6.12626e-06; G(15, 10) = 6.12625e-06; G(15, 11) = 6.12625e-06; G(15, 12) = 6.12625e-06; G(15, 13) = 6.12624e-06; G(15, 14) = 6.12624e-06; G(15, 15) = 6.12624e-06;
        }

        if (print) {
            std::cout << "G:\n" << G << std::endl << std::endl;
        }

        Eigen::VectorXf Vappwl1 = Eigen::VectorXf::Random(M);
        Vappwl1 = (Vappwl1.array() > 0.5).select(Eigen::VectorXf::Constant(M, Vdd), Eigen::VectorXf::Zero(M));
        // Vappwl1(0) = 5;
        // Vappwl1(1) = 7;
        // Vappwl1(2) = 9;

        if (M == 16 && N == 16 && print) {
            Vappwl1(0) = 0;
            Vappwl1(1) = 1.5;
            Vappwl1(2) = 0;
            Vappwl1(3) = 0;
            Vappwl1(4) = 0;
            Vappwl1(5) = 0;
            Vappwl1(6) = 0;
            Vappwl1(7) = 0;
            Vappwl1(8) = 1.5;
            Vappwl1(9) = 0;
            Vappwl1(10) = 0;
            Vappwl1(11) = 0;
            Vappwl1(12) = 0;
            Vappwl1(13) = 0;
            Vappwl1(14) = 0;
            Vappwl1(15) = 0;
        }

        Eigen::VectorXf Vappwl2 = Eigen::VectorXf::Zero(M);
        Eigen::VectorXf Vappbl1 = Eigen::VectorXf::Zero(M);
        Eigen::VectorXf Vappbl2 = Eigen::VectorXf::Zero(M);

        if (print) {
            std::cout << "Vappwl1:\n" << Vappwl1 << std::endl << std::endl;
        }

        auto start_time = std::chrono::high_resolution_clock::now();

        Eigen::VectorXf Vout = solve_cam(G, V, G_ABCD, Vappwl1, Vappwl2, Vappbl1, Vappbl2, Rswl1, Rswl2, Rsbl1, Rsbl2, Rwl, Rbl, false);

        auto end_time = std::chrono::high_resolution_clock::now();

        for (int i = 0; i < Vout.size(); i++) {
            assert(!std::isnan(Vout(i)));
        }

        if (print) {
            std::cout << "Vout:\n" << Vout << std::endl << std::endl;

            std::cout << "Norm: " << (Vref - Vout).norm() << std::endl << std::endl;
            
            std::vector<float> Iout;
            for (int j = 0; j < N; j++) {
                float Ioutj = 0;
                for (int i = 0; i < M; i++) {
                    Ioutj += (Vout(i*N + j) - Vout(i*N + j + M*N)) * G(i,j);
                }
                Iout.push_back(Ioutj);
            }

            std::cout << "Iout:" << std::endl;
            for (int j = 0; j < N; j++) {
                std::cout << Iout[j] << std::endl;
            }
            std::cout << std::endl;
        }

        auto execution_time = std::chrono::duration_cast<std::chrono::milliseconds>(end_time - start_time).count();
        std::cout << "Execution time: " << execution_time << " (ms)" << std::endl;

        total_time += execution_time;
    }
    
    if (runs > 1) {
        std::cout << "Average execution time: " << total_time/runs << " ms" << std::endl;
    }
}